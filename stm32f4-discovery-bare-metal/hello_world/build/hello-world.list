
/home/preetham/work/projects/stm32f4-discovery-bare-metal/hello_world/build/hello-world.elf:     file format elf32-littlearm
/home/preetham/work/projects/stm32f4-discovery-bare-metal/hello_world/build/hello-world.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000505

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00001ea4 memsz 0x00001ea4 flags r-x
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08001ea4 align 2**15
         filesz 0x00000024 memsz 0x00000030 flags rw-
    LOAD off    0x00017000 vaddr 0x20017000 paddr 0x08018ea4 align 2**15
         filesz 0x00000000 memsz 0x00009000 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000024  20000000  08001ea4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  20000024  08001ec8  00010024  2**2
                  ALLOC
  4 .heap         00008000  20017000  08018ea4  00017000  2**0
                  ALLOC
  5 .stack        00001000  2001f000  08020ea4  00017000  2**0
                  ALLOC
  6 .ARM.attributes 00000039  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  7 .debug_info   00002c48  00000000  00000000  0001005d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bb4  00000000  00000000  00012ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000120  00000000  00000000  00013859  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001098  00000000  00000000  00013979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000185f  00000000  00000000  00014a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000046  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000a30  00000000  00000000  000162b8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000024 l    d  .bss	00000000 .bss
20017000 l    d  .heap	00000000 .heap
2001f000 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 stm32f4_vector.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08000388 l     F .text	0000017c SetSysClock
00000000 l    df *ABS*	00000000 crt.c
00000000 l    df *ABS*	00000000 hello_world.c
08000588 l     F .text	00000056 NVIC_SetPriority
080005e0 l     F .text	00000052 SysTick_Config
20000024 l       .bss	00000000 GPIO_InitStructure
2000002c l       .bss	00000000 ticks
08000634 l     F .text	00000034 busy_wait
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
20000014 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f4xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_syscfg.c
00000000 l    df *ABS*	00000000 stm32f4xx_exti.c
00000000 l    df *ABS*	00000000 misc.c
0800057c  w    F .text	0000000c RTC_Alarm_IRQHandler
0800057c  w    F .text	0000000c HASH_RNG_IRQHandler
0800057c  w    F .text	0000000c EXTI2_IRQHandler
080018f8 g     F .text	0000001a SYSCFG_DeInit
080008d4 g     F .text	0000001e RCC_HSICmd
0800057c  w    F .text	0000000c TIM8_CC_IRQHandler
080009a8 g     F .text	0000001e RCC_PLLCmd
0800057c  w    F .text	0000000c DebugMon_Handler
080009c8 g     F .text	0000002a RCC_PLLI2SConfig
0800186c g     F .text	0000008c GPIO_PinAFConfig
08001440 g     F .text	00000020 RCC_ClearITPendingBit
08001774 g     F .text	00000034 GPIO_ReadOutputDataBit
0800057c  w    F .text	0000000c TIM1_CC_IRQHandler
0800057c  w    F .text	0000000c DMA2_Stream5_IRQHandler
0800057c  w    F .text	0000000c HardFault_Handler
0800057c  w    F .text	0000000c DMA1_Stream5_IRQHandler
08000668 g     F .text	00000022 SysTick_Handler
08001cfc g     F .text	000000cc NVIC_Init
08001034 g     F .text	00000050 RCC_AHB2PeriphResetCmd
0800057c  w    F .text	0000000c PVD_IRQHandler
0800057c  w    F .text	0000000c SDIO_IRQHandler
0800057c  w    F .text	0000000c TAMP_STAMP_IRQHandler
08001ea4 g       .text	00000000 _sidata
0800057c  w    F .text	0000000c PendSV_Handler
0800057c  w    F .text	0000000c NMI_Handler
08001ea4 g       .data	00000000 __exidx_end
0800057c  w    F .text	0000000c CAN2_RX1_IRQHandler
0800057c  w    F .text	0000000c EXTI3_IRQHandler
08001304 g     F .text	0000005c RCC_ITConfig
0800057c  w    F .text	0000000c TIM8_TRG_COM_TIM14_IRQHandler
0800057c  w    F .text	0000000c TIM1_UP_TIM10_IRQHandler
08000fe4 g     F .text	00000050 RCC_AHB1PeriphResetCmd
08001ea4 g       .text	00000000 _etext
20000024 g       .bss	00000000 _sbss
08000abc g     F .text	0000003e RCC_SYSCLKConfig
0800057c  w    F .text	0000000c TIM8_UP_TIM13_IRQHandler
0800057c  w    F .text	0000000c I2C3_ER_IRQHandler
08001a38 g     F .text	0000004e EXTI_DeInit
08000840 g     F .text	00000050 RCC_WaitForHSEStartUp
08000e14 g     F .text	00000020 RCC_BackupResetCmd
08001dc8 g     F .text	0000002c NVIC_SetVectorTable
08000a14 g     F .text	0000001e RCC_ClockSecuritySystemCmd
0800057c  w    F .text	0000000c EXTI0_IRQHandler
08001ea4 g       .text	00000000 __DTOR_END__
0800057c  w    F .text	0000000c I2C2_EV_IRQHandler
080013e4 g     F .text	00000024 RCC_ClearFlag
0800057c  w    F .text	0000000c DMA1_Stream2_IRQHandler
0800057c  w    F .text	0000000c CAN1_RX0_IRQHandler
0800057c  w    F .text	0000000c FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
0800057c  w    F .text	0000000c OTG_HS_WKUP_IRQHandler
08000814 g     F .text	0000002c RCC_HSEConfig
08001848 g     F .text	00000022 GPIO_ToggleBits
0800057c  w    F .text	0000000c UsageFault_Handler
08000f94 g     F .text	00000050 RCC_APB2PeriphClockCmd
0800057c  w    F .text	0000000c CAN2_SCE_IRQHandler
0800057c  w    F .text	0000000c DMA2_Stream2_IRQHandler
08001590 g     F .text	0000011a GPIO_Init
08000968 g     F .text	0000003e RCC_PLLConfig
20000000 g       .data	00000000 _sdata
0800057c  w    F .text	0000000c SPI1_IRQHandler
08001214 g     F .text	00000050 RCC_AHB3PeriphClockLPModeCmd
08001e48 g     F .text	0000004a SysTick_CLKSourceConfig
0800182c g     F .text	0000001c GPIO_Write
0800057c  w    F .text	0000000c TIM6_DAC_IRQHandler
080017a8 g     F .text	0000001a GPIO_ReadOutputData
080008f4 g     F .text	00000054 RCC_LSEConfig
0800057c  w    F .text	0000000c TIM1_BRK_TIM9_IRQHandler
0800057c  w    F .text	0000000c DCMI_IRQHandler
0800057c  w    F .text	0000000c CAN2_RX0_IRQHandler
08000df4 g     F .text	00000020 RCC_RTCCLKCmd
08000f44 g     F .text	00000050 RCC_APB1PeriphClockCmd
08001408 g     F .text	00000038 RCC_GetITStatus
2001f000 g       *ABS*	00000000 _heap_end
08001ea4 g       .data	00000000 __exidx_start
0800057c  w    F .text	0000000c DMA2_Stream3_IRQHandler
08000ea4 g     F .text	00000050 RCC_AHB2PeriphClockCmd
0800057c  w    F .text	0000000c USART6_IRQHandler
080019e4 g     F .text	00000020 SYSCFG_CompensationCellCmd
08000a34 g     F .text	00000044 RCC_MCO1Config
0800057c  w    F .text	0000000c USART3_IRQHandler
08001cb4 g     F .text	0000001e EXTI_ClearITPendingBit
0800057c  w    F .text	0000000c CRYP_IRQHandler
20000030 g       .bss	00000000 _ebss
08000504 g     F .text	00000076 Reset_Handler
08001758 g     F .text	0000001a GPIO_ReadInputData
0800057c  w    F .text	0000000c CAN1_RX1_IRQHandler
20017000 g       *ABS*	00000000 _heap_start
0800057c  w    F .text	0000000c UART5_IRQHandler
08001360 g     F .text	00000082 RCC_GetFlagStatus
0800057c  w    F .text	0000000c DMA2_Stream0_IRQHandler
0800057c g     F .text	0000000c Dummy_Handler
080017c4 g     F .text	0000001c GPIO_SetBits
0800057c  w    F .text	0000000c TIM4_IRQHandler
08001c0c g     F .text	00000036 EXTI_GetFlagStatus
08000afc g     F .text	00000020 RCC_GetSYSCLKSource
080017fc g     F .text	0000002e GPIO_WriteBit
0800057c  w    F .text	0000000c I2C1_EV_IRQHandler
0800057c  w    F .text	0000000c DMA1_Stream6_IRQHandler
08001084 g     F .text	00000050 RCC_AHB3PeriphResetCmd
08000bdc g     F .text	000001a8 RCC_GetClocksFreq
08001e94 g       .text	00000000 __CTOR_LIST__
0800057c  w    F .text	0000000c DMA1_Stream1_IRQHandler
080012b4 g     F .text	00000050 RCC_APB2PeriphClockLPModeCmd
0800057c  w    F .text	0000000c UART4_IRQHandler
08001be0 g     F .text	0000002a EXTI_GenerateSWInterrupt
0800057c  w    F .text	0000000c TIM3_IRQHandler
0800057c  w    F .text	0000000c RCC_IRQHandler
0800057c  w    F .text	0000000c TIM8_BRK_TIM12_IRQHandler
20000004 g     O .data	00000010 AHBPrescTable
08001c44 g     F .text	0000001e EXTI_ClearFlag
08000d84 g     F .text	0000006e RCC_RTCCLKConfig
0800057c  w    F .text	0000000c EXTI15_10_IRQHandler
0800057c  w    F .text	0000000c ADC_IRQHandler
08001a88 g     F .text	0000012c EXTI_Init
080009f4 g     F .text	0000001e RCC_PLLI2SCmd
0800057c  w    F .text	0000000c DMA1_Stream7_IRQHandler
080017e0 g     F .text	0000001c GPIO_ResetBits
0800057c  w    F .text	0000000c TIM7_IRQHandler
0800057c  w    F .text	0000000c CAN2_TX_IRQHandler
0800057c  w    F .text	0000000c TIM5_IRQHandler
00001000 g       *ABS*	00000000 _stack_size
0800057c  w    F .text	0000000c DMA2_Stream7_IRQHandler
0800057c  w    F .text	0000000c I2C3_EV_IRQHandler
0800057c  w    F .text	0000000c EXTI9_5_IRQHandler
0800057c  w    F .text	0000000c RTC_WKUP_IRQHandler
08001264 g     F .text	00000050 RCC_APB1PeriphClockLPModeCmd
0800057c  w    F .text	0000000c ETH_WKUP_IRQHandler
08001c64 g     F .text	00000050 EXTI_GetITStatus
0800057c  w    F .text	0000000c SPI2_IRQHandler
08001914 g     F .text	00000020 SYSCFG_MemoryRemapConfig
0800057c  w    F .text	0000000c OTG_HS_EP1_IN_IRQHandler
0800057c  w    F .text	0000000c MemManage_Handler
08000890 g     F .text	00000042 RCC_AdjustHSICalibrationValue
0800068c g     F .text	00000102 main
0800057c  w    F .text	0000000c DMA1_Stream0_IRQHandler
08001174 g     F .text	00000050 RCC_AHB1PeriphClockLPModeCmd
0800057c  w    F .text	0000000c CAN1_TX_IRQHandler
0800057c  w    F .text	0000000c SVC_Handler
08000b5c g     F .text	0000003e RCC_PCLK1Config
08001bb4 g     F .text	0000002a EXTI_StructInit
2001f000 g       *ABS*	00000000 _stack_end
0800057c  w    F .text	0000000c EXTI4_IRQHandler
08000b9c g     F .text	00000040 RCC_PCLK2Config
08001e9c g       .text	00000000 __CTOR_END__
08001e9c g       .text	00000000 __DTOR_LIST__
08000188 g     F .text	000000aa SystemInit
20020000 g       *ABS*	00000000 _stack_start
08001460 g     F .text	0000012e GPIO_DeInit
080019c8 g     F .text	0000001c SYSCFG_ETH_MediaInterfaceConfig
08000790 g     F .text	00000082 RCC_DeInit
08000a78 g     F .text	00000044 RCC_MCO2Config
0800057c  w    F .text	0000000c FSMC_IRQHandler
0800057c  w    F .text	0000000c ETH_IRQHandler
08001a04 g     F .text	00000034 SYSCFG_GetCompensationCellStatus
0800057c  w    F .text	0000000c OTG_HS_EP1_OUT_IRQHandler
08001df4 g     F .text	00000052 NVIC_SystemLPConfig
0800057c  w    F .text	0000000c WWDG_IRQHandler
080011c4 g     F .text	00000050 RCC_AHB2PeriphClockLPModeCmd
080010d4 g     F .text	00000050 RCC_APB1PeriphResetCmd
0800057c  w    F .text	0000000c TIM2_IRQHandler
080016ac g     F .text	00000032 GPIO_StructInit
0800057c  w    F .text	0000000c OTG_FS_WKUP_IRQHandler
0800057c  w    F .text	0000000c TIM1_TRG_COM_TIM11_IRQHandler
0800057c  w    F .text	0000000c OTG_HS_IRQHandler
0800057c  w    F .text	0000000c EXTI1_IRQHandler
20000024 g       .data	00000000 _edata
0800057c  w    F .text	0000000c USART2_IRQHandler
08001934 g     F .text	00000094 SYSCFG_EXTILineConfig
08000000 g     O .isr_vector	00000188 g_pfnVectors
08000234 g     F .text	00000154 SystemCoreClockUpdate
0800057c  w    F .text	0000000c I2C2_ER_IRQHandler
0800057c  w    F .text	0000000c DMA2_Stream1_IRQHandler
0800057c  w    F .text	0000000c CAN1_SCE_IRQHandler
08000ef4 g     F .text	00000050 RCC_AHB3PeriphClockCmd
08000e34 g     F .text	0000001e RCC_I2SCLKConfig
0800057c  w    F .text	0000000c FLASH_IRQHandler
0800057c  w    F .text	0000000c DMA2_Stream4_IRQHandler
080016e0 g     F .text	00000042 GPIO_PinLockConfig
08000e54 g     F .text	00000050 RCC_AHB1PeriphClockCmd
0800057c  w    F .text	0000000c BusFault_Handler
0800057c  w    F .text	0000000c USART1_IRQHandler
08000948 g     F .text	00000020 RCC_LSICmd
0800057c  w    F .text	0000000c OTG_FS_IRQHandler
0800057c  w    F .text	0000000c SPI3_IRQHandler
0800057c  w    F .text	0000000c DMA1_Stream4_IRQHandler
08001124 g     F .text	00000050 RCC_APB2PeriphResetCmd
0800057c  w    F .text	0000000c I2C1_ER_IRQHandler
08001cd4 g     F .text	00000026 NVIC_PriorityGroupConfig
08001724 g     F .text	00000034 GPIO_ReadInputDataBit
0800057c  w    F .text	0000000c DMA2_Stream6_IRQHandler
08000b1c g     F .text	0000003e RCC_HCLKConfig
0800057c  w    F .text	0000000c DMA1_Stream3_IRQHandler
00008000 g       *ABS*	00000000 _heap_size



Disassembly of section .text:

08000188 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800018c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000190:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000194:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000198:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800019c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001a0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80001ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80001b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80001b8:	6812      	ldr	r2, [r2, #0]
 80001ba:	f042 0201 	orr.w	r2, r2, #1
 80001be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80001c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001c8:	2200      	movs	r2, #0
 80001ca:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80001d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80001d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80001dc:	6812      	ldr	r2, [r2, #0]
 80001de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80001ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001f0:	f243 0210 	movw	r2, #12304	; 0x3010
 80001f4:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80001f8:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80001fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000202:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000206:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800020a:	6812      	ldr	r2, [r2, #0]
 800020c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000210:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000212:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000216:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800021e:	f000 f8b3 	bl	8000388 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000222:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000226:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800022a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022e:	609a      	str	r2, [r3, #8]
#endif
}
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000252:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d00d      	beq.n	8000280 <SystemCoreClockUpdate+0x4c>
 8000264:	2b08      	cmp	r3, #8
 8000266:	d015      	beq.n	8000294 <SystemCoreClockUpdate+0x60>
 8000268:	2b00      	cmp	r3, #0
 800026a:	d163      	bne.n	8000334 <SystemCoreClockUpdate+0x100>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800026c:	f240 0300 	movw	r3, #0
 8000270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000274:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000278:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800027c:	601a      	str	r2, [r3, #0]
      break;
 800027e:	e063      	b.n	8000348 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000280:	f240 0300 	movw	r3, #0
 8000284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000288:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800028c:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000290:	601a      	str	r2, [r3, #0]
      break;
 8000292:	e059      	b.n	8000348 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000294:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000298:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002a2:	0d9b      	lsrs	r3, r3, #22
 80002a4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002b4:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d013      	beq.n	80002e4 <SystemCoreClockUpdate+0xb0>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002bc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80002c0:	f2c0 037a 	movt	r3, #122	; 0x7a
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80002ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002d2:	6859      	ldr	r1, [r3, #4]
 80002d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80002d8:	400b      	ands	r3, r1
 80002da:	099b      	lsrs	r3, r3, #6
 80002dc:	fb03 f302 	mul.w	r3, r3, r2
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e012      	b.n	800030a <SystemCoreClockUpdate+0xd6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80002e4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80002e8:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80002f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002fa:	6859      	ldr	r1, [r3, #4]
 80002fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000300:	400b      	ands	r3, r1
 8000302:	099b      	lsrs	r3, r3, #6
 8000304:	fb03 f302 	mul.w	r3, r3, r2
 8000308:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800030a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800030e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000318:	0c1b      	lsrs	r3, r3, #16
 800031a:	3301      	adds	r3, #1
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000320:	697a      	ldr	r2, [r7, #20]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	fbb2 f2f3 	udiv	r2, r2, r3
 8000328:	f240 0300 	movw	r3, #0
 800032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000330:	601a      	str	r2, [r3, #0]
      break;
 8000332:	e009      	b.n	8000348 <SystemCoreClockUpdate+0x114>
    default:
      SystemCoreClock = HSI_VALUE;
 8000334:	f240 0300 	movw	r3, #0
 8000338:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000340:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000344:	601a      	str	r2, [r3, #0]
      break;
 8000346:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000348:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800034c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000356:	091a      	lsrs	r2, r3, #4
 8000358:	f240 0304 	movw	r3, #4
 800035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000360:	5c9b      	ldrb	r3, [r3, r2]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000366:	f240 0300 	movw	r3, #0
 800036a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	40da      	lsrs	r2, r3
 8000374:	f240 0300 	movw	r3, #0
 8000378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	371c      	adds	r7, #28
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000396:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800039a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800039e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003a6:	6812      	ldr	r2, [r2, #0]
 80003a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003ac:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003bc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d103      	bne.n	80003d2 <SetSysClock+0x4a>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003d0:	d1ed      	bne.n	80003ae <SetSysClock+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <SetSysClock+0x62>
  {
    HSEStatus = (uint32_t)0x01;
 80003e4:	2301      	movs	r3, #1
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	e001      	b.n	80003ee <SetSysClock+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	f040 8082 	bne.w	80004fa <SetSysClock+0x172>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000402:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000406:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000408:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800040c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800040e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000412:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000416:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800041a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000424:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000426:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800042a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800042e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000432:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000436:	6892      	ldr	r2, [r2, #8]
 8000438:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800043a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800043e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000442:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800044a:	6892      	ldr	r2, [r2, #8]
 800044c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000450:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000452:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000456:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800045a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800045e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000462:	6892      	ldr	r2, [r2, #8]
 8000464:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000468:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800046a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800046e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000472:	f245 4208 	movw	r2, #21512	; 0x5408
 8000476:	f2c0 7240 	movt	r2, #1856	; 0x740
 800047a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800047c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000484:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800048c:	6812      	ldr	r2, [r2, #0]
 800048e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000492:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000494:	bf00      	nop
 8000496:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800049a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0f6      	beq.n	8000496 <SetSysClock+0x10e>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004a8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80004ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004b0:	f240 6205 	movw	r2, #1541	; 0x605
 80004b4:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004c6:	6892      	ldr	r2, [r2, #8]
 80004c8:	f022 0203 	bic.w	r2, r2, #3
 80004cc:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004de:	6892      	ldr	r2, [r2, #8]
 80004e0:	f042 0202 	orr.w	r2, r2, #2
 80004e4:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004e6:	bf00      	nop
 80004e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d1f6      	bne.n	80004e8 <SetSysClock+0x160>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <Reset_Handler>:

  Returns     : None
==================================================================================================*/

void Reset_Handler(void)
{
 8000504:	4668      	mov	r0, sp
 8000506:	f020 0107 	bic.w	r1, r0, #7
 800050a:	468d      	mov	sp, r1
 800050c:	b581      	push	{r0, r7, lr}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
  uint32_t  * source;
  uint32_t  * dest;
  int         ret_main;

  /* Copy the initialized data of the ".data" segment from the FLASH to the area in the RAM. */
  source  = &_sidata;
 8000512:	f641 63a4 	movw	r3, #7844	; 0x1ea4
 8000516:	f6c0 0300 	movt	r3, #2048	; 0x800
 800051a:	60fb      	str	r3, [r7, #12]
  dest    = &_sdata;
 800051c:	f240 0300 	movw	r3, #0
 8000520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000524:	60bb      	str	r3, [r7, #8]

  while (dest < &_edata) {
 8000526:	e009      	b.n	800053c <Reset_Handler+0x38>
    *dest = *source;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	601a      	str	r2, [r3, #0]
    dest++;
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3304      	adds	r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
    source++;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3304      	adds	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]

  /* Copy the initialized data of the ".data" segment from the FLASH to the area in the RAM. */
  source  = &_sidata;
  dest    = &_sdata;

  while (dest < &_edata) {
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	f240 0324 	movw	r3, #36	; 0x24
 8000542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000546:	429a      	cmp	r2, r3
 8000548:	d3ee      	bcc.n	8000528 <Reset_Handler+0x24>
    dest++;
    source++;
  }

  /* Clear the ".bss" segment */
  dest = &_sbss;
 800054a:	f240 0324 	movw	r3, #36	; 0x24
 800054e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000552:	60bb      	str	r3, [r7, #8]

  while (dest < &_ebss) {
 8000554:	e004      	b.n	8000560 <Reset_Handler+0x5c>
    *dest++ = 0;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1d1a      	adds	r2, r3, #4
 800055a:	60ba      	str	r2, [r7, #8]
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
  }

  /* Clear the ".bss" segment */
  dest = &_sbss;

  while (dest < &_ebss) {
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	f240 0330 	movw	r3, #48	; 0x30
 8000566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f3      	bcc.n	8000556 <Reset_Handler+0x52>
    *dest++ = 0;
  }

  /* Call the SystemInit code from CMSIS interface */
  SystemInit();
 800056e:	f7ff fe0b 	bl	8000188 <SystemInit>

  /* The runtime environment is set. So, the main function is called */
  ret_main = main();
 8000572:	f000 f88b 	bl	800068c <main>
 8000576:	6078      	str	r0, [r7, #4]
  (void) ret_main;

  /* If it is necessary handling any error status from main function, it may be done here. */
  for (;;) ;
 8000578:	e7fe      	b.n	8000578 <Reset_Handler+0x74>
 800057a:	bf00      	nop

0800057c <Dummy_Handler>:

  Returns     : None
==================================================================================================*/

void Dummy_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

}
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	da0e      	bge.n	80005ba <NVIC_SetPriority+0x32>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800059c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80005a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	f002 020f 	and.w	r2, r2, #15
 80005aa:	1f11      	subs	r1, r2, #4
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
 80005b8:	e00c      	b.n	80005d4 <NVIC_SetPriority+0x4c>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80005ba:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80005be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005c2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005ee:	d301      	bcc.n	80005f4 <SysTick_Config+0x14>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e01a      	b.n	800062a <SysTick_Config+0x4a>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80005f4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80005f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000602:	3a01      	subs	r2, #1
 8000604:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000606:	f04f 30ff 	mov.w	r0, #4294967295
 800060a:	210f      	movs	r1, #15
 800060c:	f7ff ffbc 	bl	8000588 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000610:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000614:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000620:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000624:	2207      	movs	r2, #7
 8000626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop

08000634 <busy_wait>:

  Returns     : None
==================================================================================================*/

static void busy_wait(const uint32_t ticks_to_wait)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  const uint32_t initial_ticks = ticks;
 800063c:	f240 032c 	movw	r3, #44	; 0x2c
 8000640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	60fb      	str	r3, [r7, #12]

  while ((ticks - initial_ticks) < ticks_to_wait) ;
 8000648:	bf00      	nop
 800064a:	f240 032c 	movw	r3, #44	; 0x2c
 800064e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	1ad2      	subs	r2, r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	d3f5      	bcc.n	800064a <busy_wait+0x16>
}
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

  Returns     : None
==================================================================================================*/

void SysTick_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* Increment the counter which is necessary for busy-wating. */
  ticks++;
 800066c:	f240 032c 	movw	r3, #44	; 0x2c
 8000670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	f240 032c 	movw	r3, #44	; 0x2c
 800067c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:

                Otherwise:		Error
==================================================================================================*/

int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   * function. This is done by means of the C runtime initialization (crt.c), which, afterwards,
   * call the main application.
   */

   /* Set system tick for 1ms interrupt. */
  SystemCoreClockUpdate();
 8000690:	f7ff fdd0 	bl	8000234 <SystemCoreClockUpdate>

  if (SysTick_Config(SystemCoreClock / 1000)) {
 8000694:	f240 0300 	movw	r3, #0
 8000698:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80006a2:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80006a6:	fba3 1302 	umull	r1, r3, r3, r2
 80006aa:	099b      	lsrs	r3, r3, #6
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff97 	bl	80005e0 <SysTick_Config>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d000      	beq.n	80006ba <main+0x2e>
    for (;;) ;
 80006b8:	e7fe      	b.n	80006b8 <main+0x2c>
  }

  /* GPIOD Peripheral clock enable. */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80006ba:	2008      	movs	r0, #8
 80006bc:	2101      	movs	r1, #1
 80006be:	f000 fbc9 	bl	8000e54 <RCC_AHB1PeriphClockCmd>
   * LD5: GPIO PD14 (0: OFF, 1: ON)
   * LD6: GPIO PD15 (0: OFF, 1: ON)
   */

  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode. */
  GPIO_InitStructure.GPIO_Pin   = LED4_PIN | LED3_PIN | LED5_PIN | LED6_PIN;
 80006c2:	f240 0324 	movw	r3, #36	; 0x24
 80006c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ca:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80006ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 80006d0:	f240 0324 	movw	r3, #36	; 0x24
 80006d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006d8:	2201      	movs	r2, #1
 80006da:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80006dc:	f240 0324 	movw	r3, #36	; 0x24
 80006e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006e4:	2200      	movs	r2, #0
 80006e6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80006e8:	f240 0324 	movw	r3, #36	; 0x24
 80006ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f0:	2203      	movs	r2, #3
 80006f2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80006f4:	f240 0324 	movw	r3, #36	; 0x24
 80006f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006fc:	2200      	movs	r2, #0
 80006fe:	71da      	strb	r2, [r3, #7]
  
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000700:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000704:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000708:	f240 0124 	movw	r1, #36	; 0x24
 800070c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000710:	f000 ff3e 	bl	8001590 <GPIO_Init>
	  return 2;
  }
#endif

  while (1) {
    GPIO_SetBits(GPIOD, LED4_PIN); /* LED4 ON */
 8000714:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000718:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	f001 f850 	bl	80017c4 <GPIO_SetBits>
    busy_wait(DELAY_1000_MS); /* Keep the LED on for 1 second */
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f7ff ff84 	bl	8000634 <busy_wait>
    GPIO_SetBits(GPIOD, LED3_PIN); /* LED3 ON */
 800072c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000730:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	f001 f844 	bl	80017c4 <GPIO_SetBits>
    busy_wait(DELAY_1000_MS); /* Keep the LED on for 1 second */
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f7ff ff78 	bl	8000634 <busy_wait>
    GPIO_SetBits(GPIOD, LED5_PIN); /* LED5 ON */
 8000744:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000748:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800074c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000750:	f001 f838 	bl	80017c4 <GPIO_SetBits>
    busy_wait(DELAY_1000_MS); /* Keep the LED on for 1 second */
 8000754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000758:	f7ff ff6c 	bl	8000634 <busy_wait>
    GPIO_SetBits(GPIOD, LED6_PIN); /* LED6 ON */
 800075c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000760:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	f001 f82c 	bl	80017c4 <GPIO_SetBits>
    busy_wait(DELAY_1000_MS); /* Keep the LED on for 1 second */
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f7ff ff60 	bl	8000634 <busy_wait>
    GPIO_ResetBits(GPIOD, LED4_PIN | LED3_PIN | LED5_PIN | LED6_PIN);  /* All LEDs are OFF. */
 8000774:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000778:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800077c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000780:	f001 f82e 	bl	80017e0 <GPIO_ResetBits>
    busy_wait(DELAY_1000_MS); /* Keep all LEDs off for 1 second */
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f7ff ff54 	bl	8000634 <busy_wait>
  }
 800078c:	e7c2      	b.n	8000714 <main+0x88>
 800078e:	bf00      	nop

08000790 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000794:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000798:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800079c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007dc:	f243 0210 	movw	r2, #12304	; 0x3010
 80007e0:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80007e4:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
}
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800081e:	f643 0302 	movw	r3, #14338	; 0x3802
 8000822:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800082a:	f643 0302 	movw	r3, #14338	; 0x3802
 800082e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000852:	2031      	movs	r0, #49	; 0x31
 8000854:	f000 fd84 	bl	8001360 <RCC_GetFlagStatus>
 8000858:	4603      	mov	r3, r0
 800085a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000868:	d002      	beq.n	8000870 <RCC_WaitForHSEStartUp+0x30>
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f0      	beq.n	8000852 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	f000 fd75 	bl	8001360 <RCC_GetFlagStatus>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800087c:	2301      	movs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	e001      	b.n	8000886 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000886:	79fb      	ldrb	r3, [r7, #7]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800089e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80008bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80008de:	2300      	movs	r3, #0
 80008e0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008fe:	f643 0370 	movw	r3, #14448	; 0x3870
 8000902:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800090a:	f643 0370 	movw	r3, #14448	; 0x3870
 800090e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d002      	beq.n	8000922 <RCC_LSEConfig+0x2e>
 800091c:	2b04      	cmp	r3, #4
 800091e:	d007      	beq.n	8000930 <RCC_LSEConfig+0x3c>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8000920:	e00d      	b.n	800093e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000922:	f643 0370 	movw	r3, #14448	; 0x3870
 8000926:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
      break;
 800092e:	e006      	b.n	800093e <RCC_LSEConfig+0x4a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000930:	f643 0370 	movw	r3, #14448	; 0x3870
 8000934:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000938:	2205      	movs	r2, #5
 800093a:	701a      	strb	r2, [r3, #0]
      break;
 800093c:	bf00      	nop
    default:
      break;
  }
}
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000952:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000956:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000976:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800097a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	0191      	lsls	r1, r2, #6
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4311      	orrs	r1, r2
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	0852      	lsrs	r2, r2, #1
 800098a:	3a01      	subs	r2, #1
 800098c:	0412      	lsls	r2, r2, #16
 800098e:	4311      	orrs	r1, r2
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000998:	430a      	orrs	r2, r1
 800099a:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80009d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	0191      	lsls	r1, r2, #6
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	0712      	lsls	r2, r2, #28
 80009e2:	430a      	orrs	r2, r1
 80009e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80009fe:	2368      	movs	r3, #104	; 0x68
 8000a00:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000a1e:	234c      	movs	r3, #76	; 0x4c
 8000a20:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000a42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	609a      	str	r2, [r3, #8]
}
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000a86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000aa6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	609a      	str	r2, [r3, #8]
}
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000ac8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000acc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ae4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	609a      	str	r2, [r3, #8]
}
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000b00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	b2db      	uxtb	r3, r3
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000b28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b3a:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	609a      	str	r2, [r3, #8]
}
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000b7a:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	609a      	str	r2, [r3, #8]
}
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000ba8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000bc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	609a      	str	r2, [r3, #8]
}
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d00a      	beq.n	8000c28 <RCC_GetClocksFreq+0x4c>
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d00f      	beq.n	8000c36 <RCC_GetClocksFreq+0x5a>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d15a      	bne.n	8000cd0 <RCC_GetClocksFreq+0xf4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000c20:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000c24:	6013      	str	r3, [r2, #0]
      break;
 8000c26:	e05a      	b.n	8000cde <RCC_GetClocksFreq+0x102>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000c2e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000c32:	6013      	str	r3, [r2, #0]
      break;
 8000c34:	e053      	b.n	8000cde <RCC_GetClocksFreq+0x102>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c44:	0d9b      	lsrs	r3, r3, #22
 8000c46:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c56:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d013      	beq.n	8000c86 <RCC_GetClocksFreq+0xaa>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c5e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000c62:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c74:	6859      	ldr	r1, [r3, #4]
 8000c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	fb03 f302 	mul.w	r3, r3, r2
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	e012      	b.n	8000cac <RCC_GetClocksFreq+0xd0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c86:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000c8a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c9c:	6859      	ldr	r1, [r3, #4]
 8000c9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	099b      	lsrs	r3, r3, #6
 8000ca6:	fb03 f302 	mul.w	r3, r3, r2
 8000caa:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000cac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
      break;
 8000cce:	e006      	b.n	8000cde <RCC_GetClocksFreq+0x102>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000cd6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000cda:	6013      	str	r3, [r2, #0]
      break;
 8000cdc:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000cde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cf4:	f240 0314 	movw	r3, #20
 8000cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	40da      	lsrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000d12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	0a9b      	lsrs	r3, r3, #10
 8000d26:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d28:	f240 0314 	movw	r3, #20
 8000d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	40da      	lsrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d54:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	0b5b      	lsrs	r3, r3, #13
 8000d5a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d5c:	f240 0314 	movw	r3, #20
 8000d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	40da      	lsrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60da      	str	r2, [r3, #12]
}
 8000d7a:	3724      	adds	r7, #36	; 0x24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d9a:	d117      	bne.n	8000dcc <RCC_RTCCLKConfig+0x48>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000d9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8000dae:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000dcc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ddc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000de4:	430a      	orrs	r2, r1
 8000de6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000dfe:	f640 633c 	movw	r3, #3644	; 0xe3c
 8000e02:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000e1e:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000e22:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	601a      	str	r2, [r3, #0]
}
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000e3c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8000e40:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00c      	beq.n	8000e80 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7e:	e00c      	b.n	8000e9a <RCC_AHB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	400a      	ands	r2, r1
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00c      	beq.n	8000ed0 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000eb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ebe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ec2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ec6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ece:	e00c      	b.n	8000eea <RCC_AHB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000ed0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000edc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ee0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00c      	beq.n	8000f20 <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000f06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f16:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f1e:	e00c      	b.n	8000f3a <RCC_AHB3PeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000f20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f28:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f30:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	400a      	ands	r2, r1
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00c      	beq.n	8000f70 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f66:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6e:	e00c      	b.n	8000f8a <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f80:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	400a      	ands	r2, r1
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00c      	beq.n	8000fc0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fa6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000fb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fb6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8000fbe:	e00c      	b.n	8000fda <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000fcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	43d2      	mvns	r2, r2
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ff6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ffe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001002:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001006:	6911      	ldr	r1, [r2, #16]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	430a      	orrs	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	e00c      	b.n	800102a <RCC_AHB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001010:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001014:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001018:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800101c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001020:	6911      	ldr	r1, [r2, #16]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	43d2      	mvns	r2, r2
 8001026:	400a      	ands	r2, r1
 8001028:	611a      	str	r2, [r3, #16]
  }
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001046:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800104a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800104e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001052:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001056:	6951      	ldr	r1, [r2, #20]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	430a      	orrs	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	e00c      	b.n	800107a <RCC_AHB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001060:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001068:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800106c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001070:	6951      	ldr	r1, [r2, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	43d2      	mvns	r2, r2
 8001076:	400a      	ands	r2, r1
 8001078:	615a      	str	r2, [r3, #20]
  }
}
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001096:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800109a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800109e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010a6:	6991      	ldr	r1, [r2, #24]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	619a      	str	r2, [r3, #24]
 80010ae:	e00c      	b.n	80010ca <RCC_AHB3PeriphResetCmd+0x46>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80010b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010c0:	6991      	ldr	r1, [r2, #24]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	400a      	ands	r2, r1
 80010c8:	619a      	str	r2, [r3, #24]
  }
}
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00c      	beq.n	8001100 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80010e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010ee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010f6:	6a11      	ldr	r1, [r2, #32]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	621a      	str	r2, [r3, #32]
 80010fe:	e00c      	b.n	800111a <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001100:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001104:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001108:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800110c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001110:	6a11      	ldr	r1, [r2, #32]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	43d2      	mvns	r2, r2
 8001116:	400a      	ands	r2, r1
 8001118:	621a      	str	r2, [r3, #32]
  }
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001136:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800113a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800113e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001142:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001146:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	430a      	orrs	r2, r1
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
 800114e:	e00c      	b.n	800116a <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001150:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001154:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001158:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800115c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001160:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	43d2      	mvns	r2, r2
 8001166:	400a      	ands	r2, r1
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001186:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800118a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800118e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001192:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001196:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	430a      	orrs	r2, r1
 800119c:	651a      	str	r2, [r3, #80]	; 0x50
 800119e:	e00c      	b.n	80011ba <RCC_AHB1PeriphClockLPModeCmd+0x46>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 80011a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011b0:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	43d2      	mvns	r2, r2
 80011b6:	400a      	ands	r2, r1
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80011d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011e6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
 80011ee:	e00c      	b.n	800120a <RCC_AHB2PeriphClockLPModeCmd+0x46>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80011f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001200:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	43d2      	mvns	r2, r2
 8001206:	400a      	ands	r2, r1
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001226:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800122a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800122e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001232:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001236:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	430a      	orrs	r2, r1
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
 800123e:	e00c      	b.n	800125a <RCC_AHB3PeriphClockLPModeCmd+0x46>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001240:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001244:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001248:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800124c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001250:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	43d2      	mvns	r2, r2
 8001256:	400a      	ands	r2, r1
 8001258:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00c      	beq.n	8001290 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001276:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800127a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001282:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001286:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	430a      	orrs	r2, r1
 800128c:	661a      	str	r2, [r3, #96]	; 0x60
 800128e:	e00c      	b.n	80012aa <RCC_APB1PeriphClockLPModeCmd+0x46>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001290:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001298:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800129c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a0:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	400a      	ands	r2, r1
 80012a8:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80012c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d6:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	430a      	orrs	r2, r1
 80012dc:	665a      	str	r2, [r3, #100]	; 0x64
 80012de:	e00c      	b.n	80012fa <RCC_APB2PeriphClockLPModeCmd+0x46>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80012e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012f0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	400a      	ands	r2, r1
 80012f8:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	71fa      	strb	r2, [r7, #7]
 8001310:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00e      	beq.n	8001336 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001318:	f643 030d 	movw	r3, #14349	; 0x380d
 800131c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001320:	f643 020d 	movw	r2, #14349	; 0x380d
 8001324:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	b2d1      	uxtb	r1, r2
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	430a      	orrs	r2, r1
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	e00f      	b.n	8001356 <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001336:	f643 030d 	movw	r3, #14349	; 0x380d
 800133a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800133e:	f643 020d 	movw	r2, #14349	; 0x380d
 8001342:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001346:	7812      	ldrb	r2, [r2, #0]
 8001348:	b2d1      	uxtb	r1, r2
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	43d2      	mvns	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	400a      	ands	r2, r1
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
  }
}
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
 8001384:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001388:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00f      	b.n	80013b2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d106      	bne.n	80013a6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
 8001398:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800139c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e005      	b.n	80013b2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80013a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	74fb      	strb	r3, [r7, #19]
 80013ce:	e001      	b.n	80013d4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80013d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80013e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80013fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001416:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800141a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800144a:	f643 030e 	movw	r3, #14350	; 0x380e
 800144e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	2300      	movs	r3, #0
 800146c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001470:	429a      	cmp	r2, r3
 8001472:	d108      	bne.n	8001486 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001474:	2001      	movs	r0, #1
 8001476:	2101      	movs	r1, #1
 8001478:	f7ff fdb4 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800147c:	2001      	movs	r0, #1
 800147e:	2100      	movs	r1, #0
 8001480:	f7ff fdb0 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 8001484:	e080      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOB)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001490:	429a      	cmp	r2, r3
 8001492:	d108      	bne.n	80014a6 <GPIO_DeInit+0x46>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001494:	2002      	movs	r0, #2
 8001496:	2101      	movs	r1, #1
 8001498:	f7ff fda4 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800149c:	2002      	movs	r0, #2
 800149e:	2100      	movs	r1, #0
 80014a0:	f7ff fda0 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 80014a4:	e070      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOC)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d108      	bne.n	80014c6 <GPIO_DeInit+0x66>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80014b4:	2004      	movs	r0, #4
 80014b6:	2101      	movs	r1, #1
 80014b8:	f7ff fd94 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80014bc:	2004      	movs	r0, #4
 80014be:	2100      	movs	r1, #0
 80014c0:	f7ff fd90 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 80014c4:	e060      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOD)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d108      	bne.n	80014e6 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80014d4:	2008      	movs	r0, #8
 80014d6:	2101      	movs	r1, #1
 80014d8:	f7ff fd84 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80014dc:	2008      	movs	r0, #8
 80014de:	2100      	movs	r1, #0
 80014e0:	f7ff fd80 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 80014e4:	e050      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOE)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d108      	bne.n	8001506 <GPIO_DeInit+0xa6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80014f4:	2010      	movs	r0, #16
 80014f6:	2101      	movs	r1, #1
 80014f8:	f7ff fd74 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80014fc:	2010      	movs	r0, #16
 80014fe:	2100      	movs	r1, #0
 8001500:	f7ff fd70 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 8001504:	e040      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOF)
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001510:	429a      	cmp	r2, r3
 8001512:	d108      	bne.n	8001526 <GPIO_DeInit+0xc6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001514:	2020      	movs	r0, #32
 8001516:	2101      	movs	r1, #1
 8001518:	f7ff fd64 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800151c:	2020      	movs	r0, #32
 800151e:	2100      	movs	r1, #0
 8001520:	f7ff fd60 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 8001524:	e030      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOG)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800152c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001530:	429a      	cmp	r2, r3
 8001532:	d108      	bne.n	8001546 <GPIO_DeInit+0xe6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001534:	2040      	movs	r0, #64	; 0x40
 8001536:	2101      	movs	r1, #1
 8001538:	f7ff fd54 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800153c:	2040      	movs	r0, #64	; 0x40
 800153e:	2100      	movs	r1, #0
 8001540:	f7ff fd50 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 8001544:	e020      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else if (GPIOx == GPIOH)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800154c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001550:	429a      	cmp	r2, r3
 8001552:	d108      	bne.n	8001566 <GPIO_DeInit+0x106>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	2101      	movs	r1, #1
 8001558:	f7ff fd44 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800155c:	2080      	movs	r0, #128	; 0x80
 800155e:	2100      	movs	r1, #0
 8001560:	f7ff fd40 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
 8001564:	e010      	b.n	8001588 <GPIO_DeInit+0x128>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001570:	429a      	cmp	r2, r3
 8001572:	d109      	bne.n	8001588 <GPIO_DeInit+0x128>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001574:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001578:	2101      	movs	r1, #1
 800157a:	f7ff fd33 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800157e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001582:	2100      	movs	r1, #0
 8001584:	f7ff fd2e 	bl	8000fe4 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop

08001590 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e076      	b.n	800169a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2201      	movs	r2, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d165      	bne.n	8001694 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2103      	movs	r1, #3
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	401a      	ands	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	4619      	mov	r1, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d003      	beq.n	8001606 <GPIO_Init+0x76>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d12e      	bne.n	8001664 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2103      	movs	r1, #3
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	4619      	mov	r1, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b29b      	uxth	r3, r3
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	4619      	mov	r1, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b29b      	uxth	r3, r3
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	b29b      	uxth	r3, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	b29b      	uxth	r3, r3
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2103      	movs	r1, #3
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	79db      	ldrb	r3, [r3, #7]
 8001684:	4619      	mov	r1, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d985      	bls.n	80015ac <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	71da      	strb	r2, [r3, #7]
}
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	60fb      	str	r3, [r7, #12]
}
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop

08001724 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e001      	b.n	800174a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	b29b      	uxth	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	b29b      	uxth	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	831a      	strh	r2, [r3, #24]
}
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	835a      	strh	r2, [r3, #26]
}
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	460a      	mov	r2, r1
 8001808:	807a      	strh	r2, [r7, #2]
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	831a      	strh	r2, [r3, #24]
 8001818:	e002      	b.n	8001820 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	835a      	strh	r2, [r3, #26]
  }
}
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	615a      	str	r2, [r3, #20]
}
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	405a      	eors	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	615a      	str	r2, [r3, #20]
}
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	807a      	strh	r2, [r7, #2]
 800187a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001884:	787a      	ldrb	r2, [r7, #1]
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3108      	adds	r1, #8
 80018a8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	200f      	movs	r0, #15
 80018b6:	fa00 f303 	lsl.w	r3, r0, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	4019      	ands	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80018fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001900:	2101      	movs	r1, #1
 8001902:	f7ff fc0f 	bl	8001124 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001906:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800190a:	2100      	movs	r1, #0
 800190c:	f7ff fc0a 	bl	8001124 <RCC_APB2PeriphResetCmd>
}
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop

08001914 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800191e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001922:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	71fa      	strb	r2, [r7, #7]
 8001940:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001956:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800195a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800195e:	79ba      	ldrb	r2, [r7, #6]
 8001960:	0892      	lsrs	r2, r2, #2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	4610      	mov	r0, r2
 8001966:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800196a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800196e:	79b9      	ldrb	r1, [r7, #6]
 8001970:	0889      	lsrs	r1, r1, #2
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	3102      	adds	r1, #2
 8001976:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	43d2      	mvns	r2, r2
 800197e:	4011      	ands	r1, r2
 8001980:	1c82      	adds	r2, r0, #2
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001986:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800198a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800198e:	79ba      	ldrb	r2, [r7, #6]
 8001990:	0892      	lsrs	r2, r2, #2
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	4610      	mov	r0, r2
 8001996:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800199a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800199e:	79b9      	ldrb	r1, [r7, #6]
 80019a0:	0889      	lsrs	r1, r1, #2
 80019a2:	b2c9      	uxtb	r1, r1
 80019a4:	3102      	adds	r1, #2
 80019a6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80019aa:	79fc      	ldrb	r4, [r7, #7]
 80019ac:	79ba      	ldrb	r2, [r7, #6]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	fa04 f202 	lsl.w	r2, r4, r2
 80019b8:	4311      	orrs	r1, r2
 80019ba:	1c82      	adds	r2, r0, #2
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc90      	pop	{r4, r7}
 80019c6:	4770      	bx	lr

080019c8 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80019d0:	23dc      	movs	r3, #220	; 0xdc
 80019d2:	f2c4 2327 	movt	r3, #16935	; 0x4227
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	f2c4 2327 	movt	r3, #16935	; 0x4227
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001a0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <SYSCFG_GetCompensationCellStatus+0x22>
  {
    bitstatus = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	e001      	b.n	8001a2a <SYSCFG_GetCompensationCellStatus+0x26>
  }
  else
  {
    bitstatus = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8001a3c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8001a48:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8001a54:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a58:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8001a60:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8001a6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a78:	f2c0 027f 	movt	r2, #127	; 0x7f
 8001a7c:	615a      	str	r2, [r3, #20]
}
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001a94:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a9c:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	799b      	ldrb	r3, [r3, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d074      	beq.n	8001b90 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001aa6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001aaa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aae:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001ab2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001ab6:	6811      	ldr	r1, [r2, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	43d2      	mvns	r2, r2
 8001abe:	400a      	ands	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001ac2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ac6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aca:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001ace:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001ad2:	6851      	ldr	r1, [r2, #4]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	43d2      	mvns	r2, r2
 8001ada:	400a      	ands	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001af6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001afa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001afe:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001b02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b06:	6891      	ldr	r1, [r2, #8]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	400a      	ands	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001b12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b1a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001b1e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b22:	68d1      	ldr	r1, [r2, #12]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	43d2      	mvns	r2, r2
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	795b      	ldrb	r3, [r3, #5]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d11a      	bne.n	8001b6c <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001b36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b3e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001b42:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b46:	6891      	ldr	r1, [r2, #8]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001b50:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b58:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001b5c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b60:	68d1      	ldr	r1, [r2, #12]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e01e      	b.n	8001baa <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001b6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b74:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	795b      	ldrb	r3, [r3, #5]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e00c      	b.n	8001baa <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	6811      	ldr	r1, [r2, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	43d2      	mvns	r2, r2
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
  }
}
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	719a      	strb	r2, [r3, #6]
}
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8001be8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001bec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001bf0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001bf4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001bf8:	6911      	ldr	r1, [r2, #16]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]
}
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001c18:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e001      	b.n	8001c34 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001c4c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c50:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
}
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001c74:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001c84:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <EXTI_GetITStatus+0x3e>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001cbc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001cc0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
}
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001cdc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001ce0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8001cea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73bb      	strb	r3, [r7, #14]
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	78db      	ldrb	r3, [r3, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d040      	beq.n	8001d9a <NVIC_Init+0x9e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001d18:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001d1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	f1c3 0304 	rsb	r3, r3, #4
 8001d32:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001d34:	7b7a      	ldrb	r2, [r7, #13]
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	fa42 f303 	asr.w	r3, r2, r3
 8001d3c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	461a      	mov	r2, r3
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	789a      	ldrb	r2, [r3, #2]
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
 8001d52:	4013      	ands	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001d62:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001d66:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d76:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001d7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	0952      	lsrs	r2, r2, #5
 8001d84:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	7809      	ldrb	r1, [r1, #0]
 8001d8a:	f001 011f 	and.w	r1, r1, #31
 8001d8e:	2001      	movs	r0, #1
 8001d90:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001d98:	e011      	b.n	8001dbe <NVIC_Init+0xc2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d9a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001d9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	0952      	lsrs	r2, r2, #5
 8001da8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	7809      	ldrb	r1, [r1, #0]
 8001dae:	f001 011f 	and.w	r1, r1, #31
 8001db2:	2001      	movs	r0, #1
 8001db4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001db8:	3220      	adds	r2, #32
 8001dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001dd2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001dd6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001de0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
}
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	71fa      	strb	r2, [r7, #7]
 8001e00:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8001e08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001e0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e10:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001e14:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e18:	6911      	ldr	r1, [r2, #16]
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	e00c      	b.n	8001e3c <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001e22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001e26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e2a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001e2e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e32:	6911      	ldr	r1, [r2, #16]
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	43d2      	mvns	r2, r2
 8001e38:	400a      	ands	r2, r1
 8001e3a:	611a      	str	r2, [r3, #16]
  }
}
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d10c      	bne.n	8001e70 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001e56:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001e5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e5e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001e62:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f042 0204 	orr.w	r2, r2, #4
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e00b      	b.n	8001e88 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001e70:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001e74:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e78:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001e7c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
  }
}
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <__CTOR_LIST__>:
	...

08001e9c <__CTOR_END__>:
	...
